import heapq
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Step 1: Define the Node class for the Huffman tree
class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

# Step 2: Build the Huffman tree
def build_huffman_tree(frequency):
    heap = [Node(char, freq) for char, freq in frequency.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right
        heapq.heappush(heap, merged)

    return heap[0]

# Step 3: Generate Huffman codes
def generate_codes(node, prefix="", codebook={}):
    if node:
        if node.char is not None:
            codebook[node.char] = prefix
        generate_codes(node.left, prefix + "0", codebook)
        generate_codes(node.right, prefix + "1", codebook)
    return codebook

# Step 4: Compress a frame using Huffman coding
def compress_frame(frame, codebook):
    compressed_data = ''.join([codebook[pixel] for pixel in frame.flatten()])
    return compressed_data

# Step 5: Create a frequency table for a frame
def create_frequency_table(frame):
    unique, counts = np.unique(frame, return_counts=True)
    return dict(zip(unique, counts))

# Step 6: Example usage with a simple video frame
# For simplicity, we use grayscale frames here
frame = np.random.randint(0, 256, (8, 8), dtype=np.uint8)  # Replace this with actual frame data

# Create the frequency table and build the Huffman tree
frequency_table = create_frequency_table(frame)
root = build_huffman_tree(frequency_table)
codes = generate_codes(root)

# Compress the frame
compressed_frame = compress_frame(frame, codes)

# Print results
print("Huffman Codes:")
for char, code in codes.items():
    print(f"{char}: {code}")

print("\nOriginal frame:")
print(frame)
print("\nCompressed data:")
print(compressed_frame)

# Visualize the original frame
plt.imshow(frame, cmap='gray')
plt.title('Original Frame')
plt.show()
